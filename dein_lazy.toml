[[plugins]]
repo= 'tpope/vim-surround'
on_event= 'InsertEnter'
[[plugins]]
repo = 'tpope/vim-commentary'
on_event = 'InsertEnter'
[[plugins]]
repo = 'tpope/vim-repeat'
on_event = 'InsertEnter'
[[plugins]]
repo = 'pepo-le/win-ime-con.nvim' #手動で ~/.cache/dein/repos/ にインストール
on_event= 'InsertEnter'
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1
  nmap <Leader>j <Plug>(easymotion-j)
  nmap <Leader>k <Plug>(easymotion-k)
  nmap s <Plug>(easymotion-s2)
  nmap <Leader>w <Plug>(easymotion-bd-w)
'''
[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'VimEnter'
hook_add = '''
  let g:neosnippet#disable_runtime_snippets={'_':1}
  let g:neosnippet#snippets_directory='~/.config/nvim/snippets/'
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  imap <expr><TAB>
   \ pumvisible() ? "\<C-n>" :
   \ neosnippet#expandable_or_jumpable() ?
   \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
[[plugins]]
repo= 'Shougo/deoplete.nvim'
on_event ='VimEnter'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
'''
hook_post_source='''
  let g:deoplete#enable_at_startup = 1
  call deoplete#custom#option({
    \ 'smart_case': v:true,
    \ 'camel_case': v:true,
    \ 'min_pattern_length': 1
    \ })
'''
[[plugins]]
repo='Shougo/neomru.vim'
on_source = ['denite.nvim']
# hook_source ='''
# call denite#custom#source('file_mru', 'converters', ['converter/tail_path'])
# '''
[[plugins]]
repo = 'Shougo/denite.nvim'
on_event ='VimEnter'
hook_source='''
nmap <space> [denite]
nnoremap [denite]r :Denite file/rec -split='floating'<CR>
nnoremap [denite]f :Denite file -split='floating'<CR>
nnoremap [denite]m :Denite file_mru -split='floating'<CR>
nnoremap [denite]bo :Denite buffer -split='floating'<CR>
nnoremap [denite]bf :DeniteBufferDir file -split='floating'<CR>
nnoremap [denite]br :DeniteBufferDir file/rec -split='floating'<CR>
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  set winblend=10
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> h
  \ denite#do_map('move_up_path')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  inoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
endfunction
'''
[[plugins]]
repo ='kristijanhusak/defx-icons'
on_event ='VimEnter'
[[plugins]]
repo = 'Shougo/defx.nvim'
on_event ='VimEnter'
hook_add ='''
nnoremap <C-n> :Defx<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
'''
hook_source = '''
call defx#custom#column('icon',{
  \ 'directory_icon':'▸',
	\ 'opened_icon': '▾',
	\ 'root_icon': ' ',
  \ })
call defx#custom#column('mark', {
	\ 'readonly_icon': '✗',
	\ 'selected_icon': '✓',
	\ })
call defx#custom#option('_', {
  \ 'columns': 'mark:indent:icon:filename:type:size:time',
  \ })
'''

[[plugins]]
repo = 'vim-python/python-syntax'
on_ft='python'
hook_source='''
 let g:python_highlight_all =1
'''
[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_ft='python'
hook_source ='''
let g:deoplete#sources#jedi#enable_typeinfo =0
'''
[[plugins]]
repo= 'lervag/vimtex'
on_ft = 'tex'
hook_source = '''
  let g:vimtex_compiler_progname = 'nvr'
  let g:vimtex_compiler_latexmk = {'background': 1,'continuous': 1,'options': [ ]}
  if executable('SumatraPDF')
    let g:vimtex_view_general_viewer = 'SumatraPDF'
    let g:vimtex_view_general_options
                  \ = '-reuse-instance -forward-search @tex @line @pdf'
    let g:vimtex_view_general_options_latexmk = '-reuse-instance'
  elseif executable('okular')
    let g:vimtex_view_general_viewer = 'okular'
    let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
    let g:vimtex_view_general_options_latexmk = '--unique'
  endif
  let g:vimtex_fold_enabled = 1
  let g:vimtex_quickfix_open_on_warning = 0
'''
[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'
